name: playground
help: 🧠 CLI for Kafka Docker Playground 🐳
version: 1.0.3
dependencies:
  docker: 👉 Check documentation https://tinyurl.com/4rpcmpjj

commands:

### private commands for completion
- name: get-connector-list
  help: Return some completion for connector list
  private: true

- name: get-topic-list
  help: Return some completion for topic list
  private: true

- name: get-examples-list-with-fzf
  help: Return some completion for examples list
  private: true
  args:
  - name: cur
    required: false
    help: correspond to completion $cur
  flags:
  - long: --without-repro
    required: false
  - long: --sink-only
    required: false

- name: run
  group: Run
  environment_variables:
  - name: EDITOR 
    help: 🔖 Editor to use to open the example file.
  dependencies:
  - fzf
  help: |-
    🚀  Run example.
    
    👉 Check documentation https://tinyurl.com/yx3vbwu5

  flags:
  - long: --file
    short: -f
    required: true
    validate: file_exists_with_trick
    arg: file
    completions:
      - $(playground get-examples-list-with-fzf "$cur")
    help: |-
      Example file to run.
      It must be absolute full path. 

      🎓 Tip: use <tab> completion to trigger fzf completion.
  - long: --open
    short: -o
    help: Opening example file with text editor set with EDITOR environment variable (default is code).
  - long: --tag
    arg: tag
    required: false
    help: CP version to use
  - long: --connector-tag
    arg: connector_tag
    required: false
    help: Connector version to use
    conflicts: [--connector-zip]
  - long: --connector-zip
    arg: connector_zip
    required: false
    validate: file_exists
    help: Connector zip to use
    conflicts: [--connector-tag]
  - long: --connector-jar
    arg: connector_jar
    validate: file_exists
    required: false
    help: Connector jar to use
  - long: --disable-ksqldb
    required: false
    help: Disable ksqlDB
  - long: --disable-control-center
    required: false
    help: Disable Control Center
  - long: --enable-conduktor
    required: false
    help: Enable Conduktor
  - long: --enable-multiple-brokers
    required: false
    help: Enable Multiple brokers
  - long: --enable-multiple-connect-workers
    required: false
    help: Enable Multiple Connect Workers
  - long: --enable-jmx-grafana
    required: false
    help: |-
      Enable Grafana, Prometheus and Pyroscope

      📊 Grafana is reachable at http://127.0.0.1:3000
      🛡️  Prometheus is reachable at http://127.0.0.1:9090
      📛 Pyroscope is reachable at http://127.0.0.1:4040
  - long: --enable-kcat
    required: false
    help: Enable kcat
  - long: --enable-sr-maven-plugin-app
    required: false
    help: Enable Schema Registry Maven plugin App

- name: re-run
  group: Run
  environment_variables:
  - name: EDITOR 
    help: 🔖 Editor to use to open the example file.
  help: |-
    🛸  Re-run last example.
    
- name: bootstrap-reproduction-model
  environment_variables:
  - name: OUTPUT_FOLDER 
    help: 📁 Output folder where to generate bootstrapped files.
    default: reproduction-models
  group: Bootstrap
  dependencies:
  - fzf
  help: |-
    🛠  Bootstrap reproduction model.
    
    👉 Check documentation https://tinyurl.com/bdfs25my

  flags:
  - long: --file
    short: -f
    required: true
    validate: file_exists_with_trick
    arg: file
    completions:
      - $(playground get-examples-list-with-fzf --without-repro "$cur")
    help: |-
      Example file to use as basis.
      It must be absolute full path. 

      🎓 Tip: use <tab> completion to trigger fzf completion.

  - long: --description
    short: -d
    required: true
    validate: not_empty
    arg: description
    help: |-
      Description.

  - long: --producer
    short: -p
    arg: producer-type
    conflicts: [--pipeline]
    default: "none"
    allowed: 
      - none
      - avro
      - avro-with-key
      - protobuf
      - protobuf-with-key
      - json-schema
      - json-schema-with-key
    help: |-
      Java producer type to use. 
      One of avro, avro-with-key, protobuf, protobuf-with-key, json-schema, json-schema-with-key.

      Note: 'with-key' will also produce key with selected converter, otherwise LongConverter is used.

  - long: --nb-producers
    short: -n
    arg: nb-producers
    validate: integer
    default: ""
    help: |-
      Number of java producers to generate.

  - long: --custom-smt
    help: |-
      Add a custom SMT (no-op).

  - long: --pipeline
    required: false
    validate: file_exists_with_trick
    arg: sink_file
    conflicts: [--producer]
    completions:
      - $(playground get-examples-list-with-fzf --without-repro --sink-only "$cur")
    help: |-
      Sink example file to use for creating a pipeline.
      It must be absolute full path. 

      🎓 Tip: use <tab> completion to trigger fzf completion.

  examples:
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "simple test"
  - playground bootstrap-reproduction-model -f /full/path/hdfs2-sink.sh -d "testing with avro producer" --producer avro
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "testing with 2 protobuf producers" --producer protobuf --nb-producers 2
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "testing custom smt" --custom-smt
  - playground bootstrap-reproduction-model -f debeziumpostgres<tab> -d "create pipeline" --pipeline jdbcsink<tab>

- name: get-properties
  group: Kafka
  help: |-
    📝 Get properties file from a container.
    
    👉 Check documentation https://tinyurl.com/4vj7tm2b

  flags:
  - &container
    long: --container
    short: -c
    required: false
    default: "connect"
    arg: container
    completions:
      - $(docker ps --format '{{.Names}}')
    help: |-
      Container name.

  examples:
  - playground get-properties
  - playground get-properties --container broker
  - playground get-properties -c broker

- name: get-all-schemas
  group: Kafka
  filters:
  - not_mdc_environment
  help: |-
    🔰 Get all schemas versions for all subjects.
    
    👉 Check documentation xxxx

  examples:
  - playground get-all-schemas

- name: enable-remote-debugging
  group: Debug
  help: |-
    ✨ Enable java remote debugging for container.
    
    👉 Check documentation https://tinyurl.com/bdz843d4
  flags:
    - *container
  examples:
  - playground enable-remote-debugging
  - playground enable-remote-debugging --container broker
  - playground enable-remote-debugging -c broker

- name: log-level
  group: Debug
  help: |-
    🧬 Set log level for any package.

    👉 Check documentation https://tinyurl.com/yc78tr8a

  commands:
  - name: get
    help: Get log levels.
    flags:
    - long: --package
      short: -p
      required: false
      validate: not_empty
      arg: package
      help: |-
        Package name.

  - name: set
    help: Set log level for specific logger.
    flags:
    - long: --package
      short: -p
      required: true
      validate: not_empty
      arg: package
      help: |-
        Package name.

    - long: --level
      short: -l
      help: Log level.
      arg: level
      allowed: [INFO, WARN, DEBUG, TRACE]
      required: true

  examples:
  - playground log-level get
  - playground log-level get -p io.confluent.connect.oracle.cdc
  - playground log-level get --package io.confluent.connect.oracle.cdc
  - playground log-level set -p io.confluent.connect.oracle.cdc.logging.LogUtils -l TRACE

- name: get-jmx-metrics
  group: Kafka
  help: |-
    🔢 Get JMX metrics from a component.
    
    👉 Check documentation https://tinyurl.com/yc2myws9

  flags:
  - long: --component
    short: -c
    default: "connect"
    required: false
    arg: component
    allowed: [zookeeper, broker, connect, schema-registry]
    help: |-
      Component name.

  - long: --domain
    short: -d
    required: false
    arg: domain
    help: |-
      Domain name.

  examples:
  - playground get-jmx-metrics --component connect
  - playground get-jmx-metrics --component connect --domain "kafka.connect kafka.consumer kafka.producer"
  - playground get-jmx-metrics -c broker

- name: container
  expose: true
  group: Container
  help: |-
    🐳 Container commands.
  commands:

    - name: recreate
      group: Container
      help: |-
        💫 Recreate container(s).
        
        👉 Check documentation https://tinyurl.com/3rhjxfbs

    - name: get-ip-addresses
      group: Container
      help: |-
        🖥️  Get IP address of running containers.
      examples:
      - playground get-ip-address-container

    - name: kill-all
      group: Container
      help: |-
        💀 Kill all containers.

    - name: logs
      group: Container
      help: |-
        🕵️  Tail and follow container logs.

      flags:
      - *container
      - long: --open
        short: -o
        help: Save output to a file and open with text editor set with EDITOR environment variable (default is code).
        conflicts: [--wait-for-log]
      - long: --wait-for-log
        short: -w
        arg: log
        validate: not_empty
        help: Wait until log appears.
        conflicts: [--open]
      - long: --max-wait
        short: -m
        arg: max_wait
        validate: integer
        default: "600"
        help: Max time in seconds to wait when using --wait-for-log (default 600s).
        conflicts: [--open]

      examples:
      - playground container logs --container connect
      - playground container logs -c connect --open

    - name: ssh
      group: Container
      help: |-
        🚀 SSH into container.

      flags:
      - *container

      - long: --shell
        short: -s
        required: false
        default: "bash"
        arg: shell
        allowed: 
          - bash
          - sh
          - ksh
          - zsh
        help: |-
          Shell to use (default is bash).

      examples:
      - playground ssh -c connect
      - playground ssh -c connect -s sh
      - playground ssh --container connect --shell sh

    - name: exec
      group: Container
      help: |-
        🪄  Execute command in a container.

      flags:
      - *container

      - long: --command
        short: -d
        required: true
        validate: not_empty
        arg: command
        help: |-
          Command to execute.

      - long: --root
        help: Run command as root.

      - long: --shell
        default: "bash"
        arg: shell
        allowed: 
          - bash
          - sh
          - ksh
          - zsh
        help: |-
          Shell to use (default is bash).

      examples:
      - playground exec -c connect -d "date"
      - playground exec -c connect -d "whoami" --root
      - playground exec --container connect --command "whoami" --shell sh

    - name: restart
      group: Container
      help: |-
        🔁 Restart a container.

      flags:
      - *container

    - name: pause
      group: Container
      help: |-
        ⏸️  Pause a container.

      flags:
      - *container

    - name: resume
      group: Container
      help: |-
        ⏯️  Resume a container.

      flags:
      - *container

    - name: kill
      group: Container
      help: |-
        🔫 Kill a container.

      flags:
      - *container

- name: topic
  expose: true
  group: Topic
  filters:
  - not_mdc_environment
  help: |-
    📁 Topic commands.
  commands:

    - name: get-number-records
      group: Topic
      help: |-
        💯 Get number of records in a topic.
      flags:
      - &topic
        long: --topic
        short: -t
        required: true
        arg: topic
        completions:
          - $(playground get-topic-list)
        help: |-
          Topic name.
      examples:
      - playground get-number-records --topic a-topic
      - playground get-number-records -t a-topic

    - name: display-connect-offsets
      group: Topic
      help: |-
        🔺 Display content of connect offsets topic.

    - name: display-consumer-offsets
      group: Topic
      help: |-
        🔻 Display content of __consumer_offsets topic.

    - name: describe
      group: Topic
      help: |-
        🔎 Describe topic.
      flags:
      - *topic

    - name: consume
      group: Topic
      help: |-
        ↘️ Consumer topic(s) from current running examples

- name: connector
  expose: true
  group: Connector
  filters:
  - not_mdc_environment
  help: |-
    🔗 Connector commands.

  commands:
  - name: status
    help: ℹ️  Show status of all connectors.

  - name: plugins
    help: 🔖 Show all plugins installed.

  - name: pause
    help: ⏸️  Pause connector
    flags:
    - &connector
      long: --connector
      short: -c
      required: false
      arg: connector
      completions:
        - $(playground get-connector-list)
      help: |-
        Connector name.

  - name: versions
    help:  🧞 Get current version used in example and latest available
    flags:
    - *connector

  - name: restart
    help: ♻️  Restart connector
    flags:
    - *connector

  - name: resume
    help: ⏯️  Resume connector
    flags:
    - *connector

  - name: delete
    help: 🗑️  Delete connector
    flags:
    - *connector

  - name: show-lag
    help: 🐢 Show lag of sink connector
    flags:
    - *connector

  - name: log-level
    help: |-
      🧬 Set connect log level.
    flags:
    - *connector
    - long: --level
      short: -l
      help: Log level.
      arg: level
      allowed: [INFO, WARN, DEBUG, TRACE]
      required: true

    examples:
    - playground connector log-level --connector <connector-name> --level TRACE
    - playground connector log-level --level DEBUG

  examples:
  - playground connector status
  - playground connector status --json
  - playground connector resume --connector <connector-name>
  - playground connector pause -c <connector-name>
  - playground connector delete -c <connector-name>
