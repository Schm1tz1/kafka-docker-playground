name: playground
version: 1.0.0
dependencies:
- docker
help: |-
  🧠 CLI for Kafka Docker Playground 🐳

  👉 Check documentation https://kafka-docker-playground.io/#/cli
filters:
- docker_running
commands:

### private commands for completion
- name: get-connector-list
  help: Return some completion for connector list
  private: true

- name: get-kafka-region-list
  help: Return some completion for confluent cloud kafka cluster region list
  private: true
  dependencies:
  - confluent

- name: get-topic-list
  help: Return some completion for topic list
  private: true

- name: get-examples-list-with-fzf
  help: Return some completion for examples list
  private: true
  args:
  - name: cur
    required: false
    help: correspond to completion $cur
  flags:
  - long: --without-repro
    required: false
  - long: --sink-only
    required: false
  - long: --ccloud-only
    required: false

- name: get-zip-or-jar-with-fzf
  help: Return some completion for zip or jar list
  private: true
  args:
  - name: cur
    required: false
    help: correspond to completion $cur
  flags:
  - long: --type
    required: false
    arg: type
    allowed: [zip, jar]

- name: get-schema-with-fzf
  help: Return some completion for schema files
  private: true
  args:
  - name: cur
    required: false
    help: correspond to completion $cur

- name: bashly-reload
  private: true
  dependencies:
  - bashly

- name: run
  group: Run
  catch_all:
    label: arguments
    help: |-
      Arguments to use by example script

      Most of examples support to get required options either by using arguments or environment variables.
      
      Example with Zendesk:

      playground run -f zendesk-source<tab> <ZENDESK_URL> <ZENDESK_USERNAME> <ZENDESK_PASSWORD>
    required: false
  dependencies:
  - fzf
  help: |-
    🕹️ Run any example, except for Confluent Cloud (in this case use run-ccloud command)
    
    👉 Check documentation https://tinyurl.com/xxx

  flags:
  - long: --file
    short: -f
    required: true
    validate: file_exists_with_trick
    arg: file
    completions:
      - $(playground get-examples-list-with-fzf "$cur")
    help: |-
      🔖 Example file to run

      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion
  - long: --open
    short: -o
    help: 📖 Opening example file with text editor set with config.ini (default is code)
  - &tag
    long: --tag
    arg: tag
    required: false
    validate: minimal_cp_version
    help: |-
      🎯 Confluent Platform (CP) version to use

      Must be greater or equal to 5.0.0
  - &connector-tag
    long: --connector-tag
    arg: connector_tag
    required: false
    help: |- 
      🔗 Connector version to use

      By default, for each connector, the latest available version on Confluent Hub is used
    conflicts: [--connector-zip]
  - &connector-zip
    long: --connector-zip
    arg: connector_zip
    required: false
    validate: file_exists_with_trick
    completions:
      - $(playground get-zip-or-jar-with-fzf --type zip "$cur")
    conflicts: [--connector-tag]
    help: |- 
      🤐 Connector zip to use

      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion 
              use folder_zip_or_jar (default: ~/Downloads) in config.ini file to configure where to search the files (current folder is always used)

  - &connector-jar
    long: --connector-jar
    arg: connector_jar
    required: false
    validate: file_exists_with_trick
    completions:
      - $(playground get-zip-or-jar-with-fzf --type jar "$cur")
    help: |-
      ♨️ Connector jar to use

      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion 
              use folder_zip_or_jar (default: ~/Downloads) in config.ini file to configure where to search the files (current folder is always used)

  - &enable-ksqldb
    long: --enable-ksqldb
    required: false
    help: |-
      🚀 Enable ksqlDB

      By default, ksqldb-server and ksqldb-cli containers are not started for every test
  - &enable-control-center
    long: --enable-control-center
    required: false
    help: |-
      💠 Enable Control Center

      By default, control-center container is not started for every test

      Control Center is reachable at http://127.0.0.1:9021
  - &enable-conduktor
    long: --enable-conduktor
    required: false
    help: |- 
      🐺 Enable Conduktor Platform

      By default, Conduktor Platform container is not started for every test

      Conduktor is reachable at http://127.0.0.1:8080/console (admin/admin)
  - &enable-multiple-brokers
    long: --enable-multiple-brokers
    required: false
    help: |- 
      3️⃣ Enable multiple brokers

      By default, there is only one broker node enabled
  - &enable-multiple-connect-workers
    long: --enable-multiple-connect-workers
    required: false
    help: |-
      🥉 Enable multiple connect node

      By default, there is only one connect node enabled

      It only works when plaintext environment is used
  - &enable-jmx-grafana
    long: --enable-jmx-grafana
    required: false
    help: |-
      Enable Grafana, Prometheus and Pyroscope

      📊 Grafana is reachable at http://127.0.0.1:3000
      🛡️ Prometheus is reachable at http://127.0.0.1:9090
      📛 Pyroscope is reachable at http://127.0.0.1:4040
  - &enable-kcat
    long: --enable-kcat
    required: false
    help: |-
      🐈‍⬛ Enable kcat

      You can use it with:

      $ docker exec kcat kcat -b broker:9092 -L
  - &enable-sr-maven-plugin-app
    long: --enable-sr-maven-plugin-app
    required: false
    help: |- 
      🔰 Enable Schema Registry Maven plugin App
  - &enable-sql-datagen
    long: --enable-sql-datagen
    required: false
    help: |-
      🌪️ Enable SQL Datagen injection

      This only works for Oracle, MySql, Postgres and Microsoft Sql Server source connector examples with JDBC and Debezium
  examples:
  - playground run -f zendesk-source<tab> --tag 7.2.1 --enable-control-center <ZENDESK_URL> <ZENDESK_USERNAME> <ZENDESK_PASSWORD>
  - playground run -f jdbc<tab> --connector-tag 10.6.0 --enable-jmx-grafana --open

- name: re-run
  group: Run
  help: |-
    ⚡ Simply re-run last example you ran with <playground run> or <playground run-ccloud>
  catch_all:
    label: arguments
    help: |-
      Arguments to use by example script

      Most of examples support to get required options either by using arguments or environment variables.
      
      Example with Zendesk:

      playground run -f zendesk-source<tab> <ZENDESK_URL> <ZENDESK_USERNAME> <ZENDESK_PASSWORD>
    required: false
  dependencies:
  - fzf
  flags:
    - *tag
    - *connector-tag
    - *connector-zip
    - *connector-jar
    - *enable-ksqldb
    - *enable-control-center
    - *enable-conduktor
    - *enable-multiple-brokers
    - *enable-multiple-connect-workers
    - *enable-jmx-grafana
    - *enable-kcat
    - *enable-sr-maven-plugin-app
    - *enable-sql-datagen
  examples:
  - playground re-run
  - playground re-run --tag=6.2.1

- name: run-ccloud
  group: Run
  catch_all:
    label: arguments
    help: |-
      Arguments to use by example script

      Most of examples support to get required options either by using arguments or environment variables.
      
      Example with Zendesk:

      playground run -f zendesk-source<tab> <ZENDESK_URL> <ZENDESK_USERNAME> <ZENDESK_PASSWORD>
    required: false
  dependencies:
  - fzf
  - confluent
  help: |-
    ⛅ Run any Confluent Cloud (ccloud) example

    All you have to do is to be already logged in with confluent CLI.

    By default, a new Confluent Cloud environment with a Cluster will be created.

    You can configure the new cluster by setting:

    --cluster-cloud (or CLUSTER_CLOUD environment variable)
    --cluster-region (or CLUSTER_REGION environment variable)
    --cluster-environment (or ENVIRONMENT environment variable)

    In case you want to use your own existing cluster, you need to setup, in addition to previous ones:

    --cluster-name (or CLUSTER_NAME environment variable)
    --cluster-creds (or CLUSTER_CREDS environment variable)
    --cluster-schema-registry-creds (or SCHEMA_REGISTRY_CREDS environment variable)
    
    👉 Check documentation https://tinyurl.com/xxx
  flags:
    - long: --file
      short: -f
      required: true
      validate: file_exists_with_trick
      arg: file
      completions:
        - $(playground get-examples-list-with-fzf --ccloud-only "$cur")
      help: |-
        🔖 Example file to run

        ❕ It must be absolute full path

        🎓 Tip: use <tab> completion to trigger fzf completion
    - long: --open
      short: -o
      help: 📖 Opening example file with text editor set with config.ini (default is code)
    - *tag
    - *connector-tag
    - *connector-zip
    - *connector-jar
    - *enable-control-center
    - *enable-conduktor
    - *enable-kcat
    - &cluster-cloud
      long: --cluster-cloud
      required: false
      default: aws
      arg: cluster-cloud
      allowed: [aws, gcp, azure]
      help: |-
        🌤 The cloud provider: aws, gcp or azure. Default is aws

        🎓 Tip: you can also use CLUSTER_CLOUD environment variable
    - &cluster-region
      long: --cluster-region
      required: false
      default: eu-west-2
      arg: cluster-region
      completions:
        - $(playground get-kafka-region-list)
      help: |-
        🗺 The Cloud region. 
        
        🎓 Tip: you can also use CLUSTER_REGION environment variable
    - &cluster-environment
      long: --cluster-environment
      required: false
      arg: cluster-environment
      validate: not_empty
      help: |-
        🌐 The environment id where want your new cluster (example: env-xxxxx)

        ℹ️ Optional, if not set, new environment will be created

        🎓 Tip: you can also use ENVIRONMENT environment variable
    - &cluster-name
      long: --cluster-name
      required: false
      validate: not_empty
      arg: cluster-name
      help: |-
        🎰 The cluster name. 
        
        ❣️ Only required if you want to use your own existing cluster

        🎓 Tip: you can also use CLUSTER_NAME environment variable
    - &cluster-creds
      long: --cluster-creds
      required: false
      validate: not_empty
      arg: cluster-creds
      help: |-
        🔒 The Kafka api key and secret to use, it should be separated with semi-colon (example: <API_KEY>:<API_KEY_SECRET>)

        ❣️ Only required if you want to use your own existing cluster

        🎓 Tip: you can also use CLUSTER_CREDS environment variable
    - &luster-schema-registry-creds
      long: --cluster-schema-registry-creds
      required: false
      validate: not_empty
      arg: cluster-schema-registry-creds
      help: |-
        🔒 The Schema Registry api key and secret to use, it should be separated with semi-colon (example: <SR_API_KEY>:<SR_API_KEY_SECRET>)

        ℹ️ Optional, if not set, new credentials will be created

        ❣️ Only required if you want to use your own existing cluster
        
        🎓 Tip: you can also use SCHEMA_REGISTRY_CREDS environment variable
  examples:
  - playground run-ccloud mqtt<tab> --cluster-cloud aws --cluster-region eu-west-3 --enable-control-center --connector-tag 1.2.3

- name: open
  group: Run
  dependencies:
  - fzf
  help: |-
    👐 Simply open last example you ran with <playground run> or <playground run-ccloud>

- name: stop
  group: Run
  help: |-
    🛑 Stop currently running example

- name: bootstrap-reproduction-model
  environment_variables:
  - name: OUTPUT_FOLDER 
    help: 📁 Output folder where to generate bootstrapped files
    default: reproduction-models
  group: Bootstrap
  dependencies:
  - fzf
  help: |-
    🛠  Bootstrap reproduction model
    
    👉 Check documentation https://tinyurl.com/xxx
  catch_all:
    label: arguments
    help: |-
      Arguments to use by example script

      Most of examples support to get required options either by using arguments or environment variables.
      
      Example with Zendesk:

      playground run -f zendesk-source<tab> <ZENDESK_URL> <ZENDESK_USERNAME> <ZENDESK_PASSWORD>
    required: false
  flags:
  - *tag
  - *connector-tag
  - *connector-zip
  - *connector-jar
  - *enable-ksqldb
  - *enable-control-center
  - *enable-conduktor
  - *enable-multiple-brokers
  - *enable-multiple-connect-workers
  - *enable-jmx-grafana
  - *enable-kcat
  - *enable-sr-maven-plugin-app
  - *enable-sql-datagen
  - *cluster-region
  - *cluster-environment
  - *cluster-name
  - *cluster-creds
  - *luster-schema-registry-creds

  - long: --file
    short: -f
    required: true
    validate: file_exists_with_trick
    arg: file
    completions:
      - $(playground get-examples-list-with-fzf --without-repro "$cur")
    help: |-
      🔖 Example file to use as basis
      
      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion

  - long: --description
    short: -d
    required: true
    validate: not_empty
    arg: description
    help: |-
      💭 Description for the reproduction model

  - long: --producer
    short: -p
    arg: producer-type
    conflicts: [--pipeline]
    default: "none"
    allowed: 
      - none
      - avro
      - avro-with-key
      - protobuf
      - protobuf-with-key
      - json-schema
      - json-schema-with-key
    help: |-
      ♨️ Java producer type to use
      
      One of avro, avro-with-key, protobuf, protobuf-with-key, json-schema, json-schema-with-key

      🎓 Tip: 'with-key' will also produce key with selected converter, otherwise LongConverter is used

  - long: --nb-producers
    short: -n
    arg: nb-producers
    validate: integer
    default: ""
    help: |-
      2️⃣ Number of java producers to generate

  - long: --producer-schema-key
    arg: producer_schema
    required: false
    validate: file_exists_with_trick
    completions:
      - $(playground get-schema-with-fzf "$cur")
    help: |-
      🔰 Schema file to use for the key

      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion 
              use folder_producer_schema (default: ~/Downloads) in config.ini file to configure where to search the files

  - long: --producer-schema-value
    arg: producer_schema
    required: false
    validate: file_exists_with_trick
    completions:
      - $(playground get-schema-with-fzf "$cur")
    help: |-
      🔰 Schema file to use for the value

      ❕ It must be absolute full path

      🎓 Tip: use <tab> completion to trigger fzf completion 
              use folder_producer_schema (default: ~/Downloads) in config.ini file to configure where to search the files

  - long: --custom-smt
    help: |-
      ⚙️ Add a custom SMT (which is a no-op)

  - long: --pipeline
    required: false
    validate: file_exists_with_trick
    arg: sink_file
    conflicts: [--producer]
    completions:
      - $(playground get-examples-list-with-fzf --without-repro --sink-only "$cur")
    help: |-
      🔖 Sink example file to use for creating a pipeline
      
      ❕ It must be absolute full path. 

      🎓 Tip: use <tab> completion to trigger fzf completion

  examples:
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "simple test"
  - playground bootstrap-reproduction-model -f /full/path/hdfs2-sink.sh -d "testing with avro producer" --producer avro --producer-schema-value myschema<tab>
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "testing with 2 protobuf producers" --producer protobuf --nb-producers 2
  - playground bootstrap-reproduction-model -f hdfs2<tab> -d "testing custom smt" --custom-smt
  - playground bootstrap-reproduction-model -f debeziumpostgres<tab> -d "create pipeline" --pipeline jdbcsink<tab>

- name: get-properties
  group: Kafka
  help: |-
    📝 Get properties file from a container
    
    👉 Check documentation https://tinyurl.com/xxx

  flags:
  - &container
    long: --container
    short: -c
    required: false
    default: "connect"
    arg: container
    completions:
      - $(docker ps --format '{{.Names}}')
    help: |-
      🐳 Container name

  examples:
  - playground get-properties
  - playground get-properties --container broker
  - playground get-properties -c broker

- name: get-all-schemas
  group: Kafka
  filters:
  - not_mdc_environment
  - schema_registry_running
  help: |-
    🔰 Get all schemas versions for all subjects
    
    👉 Check documentation xxxx
  flags:
    - long: --open
      short: -o
      help: |- 
        🔖 Save output to a file and open with text editor set with config.ini (default is code)

  examples:
  - playground get-all-schemas

- name: enable-remote-debugging
  group: Debug
  help: |-
    ✨ Enable java remote debugging for container
    
    👉 Check documentation https://tinyurl.com/xxx
  flags:
    - *container
  examples:
  - playground enable-remote-debugging
  - playground enable-remote-debugging --container broker
  - playground enable-remote-debugging -c broker

- name: log-level
  group: Debug
  help: |-
    🧬 Set log level for any package

    👉 Check documentation https://tinyurl.com/xxx
  filters:
  - connect_running
  commands:
  - name: get
    help: Get log levels
    flags:
    - long: --package
      short: -p
      required: false
      validate: not_empty
      arg: package
      help: |-
        Package name

  - name: set
    help: Set log level for specific logger
    flags:
    - long: --package
      short: -p
      required: true
      validate: not_empty
      arg: package
      help: |-
        📦 Package name

    - long: --level
      short: -l
      arg: level
      allowed: [INFO, WARN, DEBUG, TRACE]
      required: true
      help: |-
        ❕Log level

  examples:
  - playground log-level get
  - playground log-level get -p io.confluent.connect.oracle.cdc
  - playground log-level get --package io.confluent.connect.oracle.cdc
  - playground log-level set -p io.confluent.connect.oracle.cdc.logging.LogUtils -l TRACE

- name: get-jmx-metrics
  group: Kafka
  help: |-
    🔢 Get JMX metrics from a component
    
    👉 Check documentation https://tinyurl.com/xxx
  dependencies:
  - java
  flags:
  - long: --component
    short: -c
    default: "connect"
    required: false
    arg: component
    allowed: [zookeeper, broker, connect, schema-registry]
    help: |-
      Component name

  - long: --domain
    short: -d
    required: false
    arg: domain
    help: |-
      Domain name

  examples:
  - playground get-jmx-metrics --component connect
  - playground get-jmx-metrics --component connect --domain "kafka.connect kafka.consumer kafka.producer"
  - playground get-jmx-metrics -c broker

- name: container
  expose: true
  group: Container
  help: |-
    🐳 Container commands
  commands:

    - name: recreate
      group: Container
      help: |-
        💫 Recreate container(s)
        
        👉 Check documentation https://tinyurl.com/xxx

    - name: get-ip-addresses
      group: Container
      help: |-
        🖥️  Get ip address of running containers
      examples:
      - playground get-ip-address-container

    - name: kill-all
      group: Container
      help: |-
        💀 Kill all containers

    - name: logs
      group: Container
      help: |-
        🕵️  Tail and follow container logs

      flags:
      - *container
      - long: --open
        short: -o
        help: |- 
          🔖 Save output to a file and open with text editor set with config.ini (default is code)
        conflicts: [--wait-for-log]
      - long: --wait-for-log
        short: -w
        arg: log
        validate: not_empty
        help: |- 
          😴 Wait until log appears
        conflicts: [--open]
      - long: --max-wait
        short: -m
        arg: max_wait
        validate: integer
        default: "600"
        help: |- 
          ⏳ Max time in seconds to wait when using --wait-for-log (default 600s)
        conflicts: [--open]

      examples:
      - playground container logs --container connect
      - playground container logs -c connect --open

    - name: ssh
      group: Container
      help: |-
        🛬 SSH into container

      flags:
      - *container

      - long: --shell
        short: -s
        required: false
        default: "bash"
        arg: shell
        allowed: 
          - bash
          - sh
          - ksh
          - zsh
        help: |-
          💾 Shell to use (default is bash)

      examples:
      - playground ssh -c connect
      - playground ssh -c connect -s sh
      - playground ssh --container connect --shell sh

    - name: exec
      group: Container
      help: |-
        🪄  Execute command in a container

      flags:
      - *container

      - long: --command
        required: true
        validate: not_empty
        arg: command
        help: |-
          📲 Command to execute

      - long: --root
        help: |-
          👑 Run command as root

      - long: --shell
        default: "bash"
        arg: shell
        allowed: 
          - bash
          - sh
          - ksh
          - zsh
        help: |-
          💾 Shell to use (default is bash)

      examples:
      - playground exec -c connect -d "date"
      - playground exec -c connect -d "whoami" --root
      - playground exec --container connect --command "whoami" --shell sh

    - name: restart
      group: Container
      help: |-
        🔁 Restart a container

      flags:
      - *container

    - name: pause
      group: Container
      help: |-
        ⏸️  Pause a container

      flags:
      - *container

    - name: resume
      group: Container
      help: |-
        ⏯️  Resume a container

      flags:
      - *container

    - name: kill
      group: Container
      help: |-
        🔫 Kill a container

      flags:
      - *container

- name: topic
  expose: true
  group: Topic
  filters:
  - not_mdc_environment
  help: |-
    🗳 Topic commands
  commands:

    - name: get-number-records
      group: Topic
      help: |-
        💯 Get number of records in a topic
      flags:
      - &topic
        long: --topic
        short: -t
        required: true
        arg: topic
        completions:
          - $(playground get-topic-list)
        help: |-
          🗳 Topic name
      examples:
      - playground get-number-records --topic a-topic
      - playground get-number-records -t a-topic

    - name: display-consumer-offsets
      group: Topic
      help: |-
        📭 Display content of __consumer_offsets topic

    - name: describe
      group: Topic
      help: |-
        🔬 Describe topic
      flags:
      - *topic

    - name: consume
      filters:
      - schema_registry_running
      group: Topic
      help: |-
        📥 Consume topic from beginning
      flags:
      - *topic
      - long: --max-messages
        arg: max-messages
        validate: integer
        required: false
        default: ""
        help: |-
          Max number of messages to consume

- name: connector
  expose: true
  group: Connector
  filters:
  - not_mdc_environment
  - connect_running
  help: |-
    🔗 Connector commands

  commands:
  - name: status
    help: 🧩 Show status of all connectors

  - name: plugins
    help: 🎨 Show all plugins installed

  - name: pause
    help: ⏸️  Pause connector
    flags:
    - &connector
      long: --connector
      short: -c
      required: false
      arg: connector
      completions:
        - $(playground get-connector-list)
      help: |-
        🔗 Connector name

        🎓 Tip: If not specified, the command will apply to all connectors

  - name: versions
    help:  🧞 Get current version used in example
    flags:
    - *connector

  - name: restart
    help: ♻️  Restart connector
    flags:
    - *connector

  - name: resume
    help: ⏯️  Resume connector
    flags:
    - *connector

  - name: delete
    help: 🗑️  Delete connector
    flags:
    - *connector

  - name: show-lag
    help: 🐢 Show lag of sink connector
    flags:
    - *connector

  - name: log-level
    help: |-
      🧬 Set connect log level
    flags:
    - *connector
    - long: --level
      short: -l
      help: Log level
      arg: level
      allowed: [INFO, WARN, DEBUG, TRACE]
      required: true

    examples:
    - playground connector log-level --connector <connector-name> --level TRACE
    - playground connector log-level --level DEBUG

  examples:
  - playground connector status
  - playground connector status --json
  - playground connector resume --connector <connector-name>
  - playground connector pause -c <connector-name>
  - playground connector delete -c <connector-name>
