---
version: '3.5'
services:

  zookeeper:
    environment:
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: zookeeper

  broker:
    environment:
      KAFKA_JMX_PORT: 10000
      KAFKA_JMX_HOSTNAME: broker

  schema-registry:
    environment:
      SCHEMA_REGISTRY_JMX_PORT: 10001
      SCHEMA_REGISTRY_JMX_HOSTNAME: schema-registry

  connect:
    environment:
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components/confluentinc-kafka-connect-replicator,/usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen
      KAFKA_JMX_PORT: 10002
      KAFKA_JMX_HOSTNAME: connect
  
  ksqldb-server: 
    environment:
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_JMX_OPTS: >
        -Djava.rmi.server.hostname=ksqldb-server
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=10003
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.rmi.port=10003
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_JMX_HOSTNAME: ksqldb-server
      KSQL_JMX_PORT: 10003
  datadog:
    build: ../../tools/datadog/datadog
    hostname: datadog
    container_name: datadog
    links:
     - zookeeper
     - broker
     - schema-registry
     - connect
     - ksqldb-server
    environment:
     - DD_API_KEY=$DD_API_KEY
     - DD_SITE=$DD_SITE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
